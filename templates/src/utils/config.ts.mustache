import * as toml from '@iarna/toml';
import * as fs from 'fs';

export class Config {
  private static config: any;

  static load(filePath: string): void {
    const fileContent = fs.readFileSync(filePath, 'utf-8');
    this.config = toml.parse(fileContent);
  }

  static get(key: string): any {
    const keys: string[] = key.split('.');
    return keys.reduce((previousValue: any, currentValue: string, currentIndex: number) => {
      // Ensure the previous value and the current key exist in the configuration
      if (previousValue && typeof previousValue === 'object' && currentValue in previousValue) {
        return previousValue[currentValue];
      }
      // If the path breaks, return undefined or throw an error
      if (currentIndex === keys.length - 1) {
        // Last iteration and the key does not exist, throw an error or return undefined
        throw new Error(`Configuration key "${key}" not found.`);
      }
      // Path breaks in between, return an empty object to prevent errors in the next iteration
      return {};
    }, this.config);
  }
}
